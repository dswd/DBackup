#!/bin/bash

DUPLICITY=$(which duplicity)
CONFIGDIR="/etc/dbackup"
ARCHIVE="/var/lib/dbackup"

NAME="$1"
shift

if [ -f /etc/default/dbackup ]; then
  . /etc/default/dbackup
fi

#Can be overwritten by config file
EXEC_BEFORE="$CONFIGDIR/$NAME.exec_before.sh"
EXEC_AFTER="$CONFIGDIR/$NAME.exec_after.sh"
LOGFILE="/var/log/dbackup/$NAME"
VOLSIZE="100"
GPGKEY=""
PASSPHRASE=""
MAX_FULL_AGE="3M"

usage() {
  cat <<EOF
Usage: $0 name cmd [opts]
   name: The name of the duplicity backup entry

The following commands exist:

$0 NAME create
	Creates a new backup entry
$0 NAME edit [config|excludes]
	Edit the exclude list or the config (default) of the backup entry
$0 NAME status
	Show the status of a backup entry
$0 NAME files
	Show the list of all files in the backup of a backup entry
$0 NAME logs
	Show the log file of a backup entry
$0 NAME backup
	Run a normal backup, duplicity decides whether this is incremental or full
$0 NAME full
	Run a full backup
$0 NAME verify
	Verify the backups
$0 NAME restore DST [--file-to-restore PATH] [--time AGE]
	Restore a backup. To avoid overwriting files, files are restored to the given destination.
	Subsets of the backup can be restored by giving the PATH of the files (without leading /)
	If AGE is given, the backup of that date is used instead of the most recent
$0 NAME clean
	Clean up leftovers from aborted runs
$0 NAME remove AGE [--force]
	Remove backup sets older than AGE
	--force must be used to actually delete the files instead of just listing them
EOF
}

if [ -z "$NAME" ]; then
  usage
  exit 0
fi

EXCLUDEFILE="$CONFIGDIR/$NAME.exclude"
CONFFILE="$CONFIGDIR/$NAME.conf"
if [ -f "$CONFFILE" ]; then
  . "$CONFFILE"
else
  if [ "$1" == "create" ]; then
    cp -a "$CONFIGDIR/example.conf" "$CONFFILE"
    cp -a "$CONFIGDIR/example.exclude" "$EXCLUDEFILE"
    exit 0
  else
    echo "No such profile: $NAME" 1>&2
    exit -1
  fi
fi

OPTS=( "${OPTS[@]}" --archive "$ARCHIVE" --name "$NAME" )

BAREOPTS=( "${OPTS[@]}" )

if [ "$VOLSIZE" != "" ]; then
   OPTS=( "${OPTS[@]}" --volsize"$VOLSIZE" )
fi
if [ "$GPGKEY" != "" ]; then
  OPTS=( "${OPTS[@]}" --encrypt-key "$GPGKEY" --gpg-options "--trusted-key $GPGKEY" )
fi
# ignore PASSPHRASE here
if [ "$MAX_FULL_AGE" != "" ]; then
  OPTS=( "${OPTS[@]}" --full-if-older-than "$MAX_FULL_AGE" )
fi
if [ -f "$EXCLUDEFILE" ]; then
  OPTS=( "${OPTS[@]}" --exclude-globbing-filelist "$EXCLUDEFILE" )
fi

ARG="$1"
shift

function run() {
	MODE=$1
	if [ -x "$EXEC_BEFORE" ]; then
		LOCAL=$LOCAL REMOTE=$REMOTE NAME=$NAME $EXEC_BEFORE || exit -4
	fi
	if [ "$PASSPHRASE" == "" ]; then
		$DUPLICITY "${OPTS[@]}" "$@" $MODE $LOCAL $REMOTE | tee -a $LOGFILE
	else
		PASSPHRASE="$PASSPHRASE" $DUPLICITY "${OPTS[@]}" "$@" $MODE $LOCAL $REMOTE | tee -a $LOGFILE
	fi
	if [ -x "$EXEC_AFTER" ]; then
		LOCAL=$LOCAL REMOTE=$REMOTE NAME=$NAME $EXEC_AFTER || exit -4
	fi
}

case "$ARG" in
	create )
		echo "$NAME already exists" >&2
		exit -3
		;;
	edit )
		case "$1" in
			exclude | excludes )
				${EDITOR:-nano} "$EXCLUDEFILE"
				;;
			config | * )
				${EDITOR:-nano} "$CONFFILE"
				;;
			exec*before )
				[ -f "$EXEC_BEFORE" ] || cp -a "$CONFIGDIR/example.exec_before.sh" "$EXEC_BEFORE"
				${EDITOR:-nano} "$EXEC_BEFORE"
				[ -f "$EXEC_BEFORE" ] && chmod +x "$EXEC_BEFORE"
				;;
			exec*after )
				[ -f "$EXEC_AFTER" ] || cp -a "$CONFIGDIR/example.exec_after.sh" "$EXEC_AFTER"
				${EDITOR:-nano} "$EXEC_AFTER"
				[ -f "$EXEC_AFTER" ] && chmod +x "$EXEC_AFTER"
				;;
		esac
		;;
	status )
		$DUPLICITY "${OPTS[@]}" "$@" collection-status $REMOTE
		;;
	files | list )
		$DUPLICITY "${OPTS[@]}" "$@" list-current-files $REMOTE
		;;
	run | backup )
		run
		;;
	full )
		run full
		;;
	verify )
		$DUPLICITY "${OPTS[@]}" "$@" verify $REMOTE $LOCAL
		;;
	restore )
		DST="$1"
		shift
		$DUPLICITY "${BAREOPTS[@]}" "$@" restore $REMOTE "$DST"
		;;
	clean )
		$DUPLICITY "${OPTS[@]}" "$@" clean $REMOTE
		;;
	logs | log )
		less $LOGFILE
		;;
	remove )
		TIME="$1"
		shift
		$DUPLICITY  "${OPTS[@]}" remove-older-than $TIME "$@" $REMOTE
		;;
        schedule )
		CHANGE="$1"
		CURRENT="none"
		for period in hourly daily weekly monthly yearly; do
			if [ -f "/etc/cron.$period/dbackup-$NAME" ]; then
				CURRENT="$period"
			fi
		done
		if [ "$CHANGE" == "" ]; then
			echo "Schedule of $NAME backup: $CURRENT"
		else
			rm -f "/etc/cron.$CURRENT/dbackup-$NAME"
			if [ "$CHANGE" != "never" ]; then
				cat <<EOF > "/etc/cron.$CHANGE/dbackup-$NAME"
#!/bin/bash
$(which dbackup) $NAME run >/dev/null
EOF
			fi
		fi
                ;;
	* )
		usage
		exit -2
		;;
esac
